use std::fs;

pub struct IHDR {
    pub header: [u8; 4],
    pub width: u32,
    pub height: u32,
    pub bit_depth: u8,
    pub color_type: u8,
    pub compression_method: u8,
    pub filter_method: u8,
    pub interlace_method: u8,
}

pub struct IDAT {
    pub header: [u8; 4],
    pub width: Vec<u8>,
}

pub fn parse_ihdr() -> IHDR {
    let file_path = "in.png";

    let file_data: Vec<u8> = fs::read(file_path).unwrap();
    let mut ihdr_data: Vec<u8> = vec![];
    for (i, iter) in file_data.clone().into_iter().enumerate() {
        if (iter == 73) {
            if (file_data[i+1] == 72 && file_data[i+2] == 
                68 && file_data[i+3] == 82) {

                for j in i+4..i+17 {
                    ihdr_data.push(file_data[j]);
                }
            }
        }
    }
    let mut width_pre: [u8; 4] = [0; 4];
    width_pre.clone_from_slice(&ihdr_data[..4]);
    let height_pre: [u8; 4] = [ihdr_data[4],ihdr_data[5],ihdr_data[6],ihdr_data[7]];
    let bin_width = format!("{:b}", width_pre[0]) + &format!("{:b}", width_pre[0]) + &format!("{:b}", width_pre[0]) + &format!("{:b}", width_pre[0]);
    println!("bin_width: {}", bin_width);
    let ihdr = IHDR {
        header: [73, 72, 68, 82],
        width: 5,
        height: 5,
        bit_depth: ihdr_data[8],
        color_type: ihdr_data[9],
        compression_method: ihdr_data[10],
        filter_method: ihdr_data[11],
        interlace_method: ihdr_data[12],
    };
    return ihdr;
}

pub fn print_ihdr(ihdr: IHDR) {
    println!("Image Width: {}", ihdr.width);
    println!("Image Height: {}", ihdr.height);
    println!("Bit Depth: {}\nColor Type: {}\nCompression Type: {}\nFilter Method: {}\nInterlace Method {}", ihdr.bit_depth, ihdr.color_type, ihdr.compression_method, ihdr.filter_method, ihdr.interlace_method);
     
}

fn to_bin(v: Vec<u8>, l: u8) -> String {
    let s = String::from("");
    let j = 0;
    for i in v {
        if (j == l) {
            break;
        }
        let x = i;
        s.push_str(&format!("{x:b}"));
        j += 0;
    }
    return s;
}

